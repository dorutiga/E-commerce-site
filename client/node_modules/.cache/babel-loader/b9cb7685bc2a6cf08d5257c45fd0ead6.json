{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport UserActionType from '../user/user.types';\nimport { clearCart } from './cart.actions';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectUtilizatorCurent } from '../user/user.selectors';\nimport { setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionType.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* updateCartInFirebase() {\n  const utilizatorCurent = yield select(selectUtilizatorCurent);\n\n  if (utilizatorCurent) {\n    try {\n      const cartRef = yield getUserCartRef(utilizatorCurent.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Dorut Iuga/Desktop/REACT/e-commerce-bhealth/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","UserActionType","clearCart","getUserCartRef","selectUtilizatorCurent","setCartFromFirebase","selectCartItems","clearCartOnSignOut","onSignOutSuccess","SIGN_OUT_SUCCESS","updateCartInFirebase","utilizatorCurent","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","cartSagas"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,GAA/B,EAAoCC,MAApC,QAAiD,oBAAjD;AAEA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAAQC,SAAR,QAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAAUC,sBAAV,QAAwC,wBAAxC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,OAAO,UAAUC,kBAAV,GAA8B;AACjC,QAAMR,GAAG,CAACG,SAAS,EAAV,CAAT;AACH;AAED,OAAO,UAAUM,gBAAV,GAA4B;AAC/B,QAAMV,UAAU,CAACG,cAAc,CAACQ,gBAAhB,EAAiCF,kBAAjC,CAAhB;AACH;AACD,OAAO,UAAUG,oBAAV,GAAiC;AACpC,QAAMC,gBAAgB,GAAG,MAAMX,MAAM,CAACI,sBAAD,CAArC;;AACA,MAAIO,gBAAJ,EAAsB;AACpB,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMT,cAAc,CAACQ,gBAAgB,CAACE,EAAlB,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMd,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMM,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMT,OAAO,GAAG,MAAMT,cAAc,CAACkB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMxB,GAAG,CAACM,mBAAmB,CAACiB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACD;AACH,OAAO,UAAUW,SAAV,GAAsB;AACzB,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAACW,gBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import {all, call, takeLatest, put, select} from 'redux-saga/effects';\r\n\r\nimport UserActionType from '../user/user.types';\r\nimport {clearCart} from './cart.actions';\r\nimport { getUserCartRef } from '../../firebase/firebase.utils';\r\nimport {  selectUtilizatorCurent } from '../user/user.selectors';\r\nimport { setCartFromFirebase } from './cart.actions';\r\nimport { selectCartItems } from './cart.selectors';\r\n\r\nexport function* clearCartOnSignOut(){\r\n    yield put(clearCart());\r\n}\r\n\r\nexport function* onSignOutSuccess(){\r\n    yield takeLatest(UserActionType.SIGN_OUT_SUCCESS,clearCartOnSignOut )\r\n}\r\nexport function* updateCartInFirebase() {\r\n    const utilizatorCurent = yield select(selectUtilizatorCurent);\r\n    if (utilizatorCurent) {\r\n      try {\r\n        const cartRef = yield getUserCartRef(utilizatorCurent.id);\r\n        const cartItems = yield select(selectCartItems);\r\n        yield cartRef.update({ cartItems });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  export function* checkCartFromFirebase({ payload: user }) {\r\n    const cartRef = yield getUserCartRef(user.id);\r\n    const cartSnapshot = yield cartRef.get();\r\n    yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\r\n  }\r\nexport function* cartSagas() {\r\n    yield(all([call(onSignOutSuccess)]))\r\n}"]},"metadata":{},"sourceType":"module"}