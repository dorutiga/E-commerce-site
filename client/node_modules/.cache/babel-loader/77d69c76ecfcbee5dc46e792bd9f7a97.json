{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCJlSUyxzH0Ms9pahwkmUYIo54SZJDgR-k\",\n  authDomain: \"ecommercedb-2a4e1.firebaseapp.com\",\n  projectId: \"ecommercedb-2a4e1\",\n  storageBucket: \"ecommercedb-2a4e1.appspot.com\",\n  messagingSenderId: \"763283060175\",\n  appId: \"1:763283060175:web:67786c29647c58c5f40eba\",\n  measurementId: \"G-7S7GY4Y85X\"\n};\nfirebase.initializeApp(config); //prin aceasta functie, preluam utilizatorul din auth(logat cu google) si il v-om atasa coletiei users\n\nexport const dateUtilizator = async (userAuth, additionalData) => {\n  //functie anonima\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData //afiseaza o lista de paraemtrii\n\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getUserCartRef = async userId => {\n  const cartsRef = firestore.collection('carts').where('userId', '==', userId);\n  const snapShot = await cartsRef.get();\n\n  if (snapShot.empty) {\n    const cartDocRef = firestore.collection('carts').doc();\n    await cartDocRef.set({\n      userId,\n      cartItems: []\n    });\n    return cartDocRef;\n  } else {\n    return snapShot.docs[0].ref;\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const trasformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return trasformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getUtilizatorCurent = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // creaza un serviciu de autentificare Google\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Dorut Iuga/Desktop/REACT/e-commerce-bhealth/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","dateUtilizator","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getUserCartRef","userId","cartsRef","collection","where","empty","cartDocRef","cartItems","docs","ref","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","trasformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getUtilizatorCurent","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCJlSUyxzH0Ms9pahwkmUYIo54SZJDgR-k\",\r\n    authDomain: \"ecommercedb-2a4e1.firebaseapp.com\",\r\n    projectId: \"ecommercedb-2a4e1\",\r\n    storageBucket: \"ecommercedb-2a4e1.appspot.com\",\r\n    messagingSenderId: \"763283060175\",\r\n    appId: \"1:763283060175:web:67786c29647c58c5f40eba\",\r\n    measurementId: \"G-7S7GY4Y85X\"\r\n  };\r\n  firebase.initializeApp(config);\r\n  //prin aceasta functie, preluam utilizatorul din auth(logat cu google) si il v-om atasa coletiei users\r\n  export const dateUtilizator = async (userAuth, additionalData) => { //functie anonima\r\n\r\n    if (!userAuth) return;\r\n  \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n\r\n    if (!snapShot.exists) {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          \r\n          ...additionalData //afiseaza o lista de paraemtrii\r\n        })\r\n      } catch (error) {\r\n        console.log('error creating user', error.message);\r\n      }\r\n    }\r\n  \r\n    return userRef;\r\n  };\r\n  export const getUserCartRef = async userId => {\r\n    const cartsRef = firestore.collection('carts').where('userId', '==', userId);\r\n    const snapShot = await cartsRef.get();\r\n  \r\n    if (snapShot.empty) {\r\n      const cartDocRef = firestore.collection('carts').doc();\r\n      await cartDocRef.set({ userId, cartItems: [] });\r\n      return cartDocRef;\r\n    } else {\r\n      return snapShot.docs[0].ref;\r\n    }\r\n  };\r\n  \r\n  export const addCollectionAndDocuments = async (\r\n    collectionKey,\r\n    objectsToAdd\r\n  ) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n  \r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      batch.set(newDocRef, obj);\r\n    });\r\n  \r\n    return await batch.commit();\r\n  };\r\n \r\n export const convertCollectionsSnapshotToMap =(collections) => {\r\n      const trasformedCollection = collections.docs.map(doc => {\r\n        const {title , items } = doc.data();\r\n\r\n        return {\r\n          routeName : encodeURI(title.toLowerCase()),\r\n          id : doc.id,\r\n          title, \r\n          items\r\n        };\r\n      })\r\n      return trasformedCollection.reduce((accumulator, collection)=> {\r\n      accumulator[collection.title.toLowerCase()] =collection;\r\n      return accumulator;\r\n    }, {})\r\n  };\r\n\r\nexport const getUtilizatorCurent = () =>{\r\n  return new Promise((resolve, reject) =>{\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth =>{\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject)\r\n  })\r\n}\r\n\r\n  export const auth  = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n// creaza un serviciu de autentificare Google\r\n export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({ prompt: 'select_account' });\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\r\n\r\n\r\n  export default firebase;"]},"metadata":{},"sourceType":"module"}