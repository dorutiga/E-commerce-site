{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCJlSUyxzH0Ms9pahwkmUYIo54SZJDgR-k\",\n  authDomain: \"ecommercedb-2a4e1.firebaseapp.com\",\n  projectId: \"ecommercedb-2a4e1\",\n  storageBucket: \"ecommercedb-2a4e1.appspot.com\",\n  messagingSenderId: \"763283060175\",\n  appId: \"1:763283060175:web:67786c29647c58c5f40eba\",\n  measurementId: \"G-7S7GY4Y85X\"\n}; //prin aceasta functie, preluam utilizatorul din auth(logat cu google) si il v-om atasa coletiei users\n\nexport const dateUtilizator = async (userAuth, additionalData) => {\n  //functie anonima\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData //afiseaza o lista de paraemtrii\n\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // creaza un serviciu de autentificare Google\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Dorut Iuga/Desktop/REACT/e-commerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","dateUtilizator","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,mCAFD;AAGXC,EAAAA,SAAS,EAAE,mBAHA;AAIXC,EAAAA,aAAa,EAAE,+BAJJ;AAKXC,EAAAA,iBAAiB,EAAE,cALR;AAMXC,EAAAA,KAAK,EAAE,2CANI;AAOXC,EAAAA,aAAa,EAAE;AAPJ,CAAf,C,CASE;;AACA,OAAO,MAAMC,cAAc,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAAE;AAClE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAIA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAGA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV,cAJa,CAIE;;AAJF,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CA1BM;AA4BR,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAgC;AACvE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACD,CAHM;AAMN/B,QAAQ,CAACiC,aAAT,CAAuBhC,MAAvB;AAEA,OAAO,MAAMiC,IAAI,GAAIlC,QAAQ,CAACkC,IAAT,EAAd;AACP,OAAO,MAAMrB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB,C,CACT;;AACE,MAAMsB,QAAQ,GAAG,IAAInC,QAAQ,CAACkC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAGP,eAAenC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCJlSUyxzH0Ms9pahwkmUYIo54SZJDgR-k\",\r\n    authDomain: \"ecommercedb-2a4e1.firebaseapp.com\",\r\n    projectId: \"ecommercedb-2a4e1\",\r\n    storageBucket: \"ecommercedb-2a4e1.appspot.com\",\r\n    messagingSenderId: \"763283060175\",\r\n    appId: \"1:763283060175:web:67786c29647c58c5f40eba\",\r\n    measurementId: \"G-7S7GY4Y85X\"\r\n  };\r\n  //prin aceasta functie, preluam utilizatorul din auth(logat cu google) si il v-om atasa coletiei users\r\n  export const dateUtilizator = async (userAuth, additionalData) => { //functie anonima\r\n    if (!userAuth) return;\r\n  \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    \r\n    \r\n\r\n    const snapShot = await userRef.get();\r\n    \r\n\r\n    if (!snapShot.exists) {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData //afiseaza o lista de paraemtrii\r\n        });\r\n      } catch (error) {\r\n        console.log('error creating user', error.message);\r\n      }\r\n    }\r\n  \r\n    return userRef;\r\n  };\r\n  \r\n export const addCollectionAndDocuments = (collectionKey, objectsToAdd)=> {\r\n   const collectionRef = firestore.collection(collectionKey);\r\n   console.log(collectionRef)\r\n }\r\n\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth  = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n// creaza un serviciu de autentificare Google\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({ prompt: 'select_account' });\r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider)\r\n\r\n\r\n  export default firebase;\r\n"]},"metadata":{},"sourceType":"module"}