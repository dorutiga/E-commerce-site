{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport UserActionType from '../user/user.types';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectUtilizatorCurent } from '../user/user.selectors';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const utilizatorCurent = yield select(selectUtilizatorCurent);\n\n  if (utilizatorCurent) {\n    try {\n      const cartRef = yield getUserCartRef(utilizatorCurent.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionType.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionType.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["C:/Users/Dorut Iuga/Desktop/REACT/e-commerce-bhealth/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","UserActionType","getUserCartRef","selectUtilizatorCurent","clearCart","setCartFromFirebase","selectCartItems","CartActionTypes","clearCartOnSignOut","updateCartInFirebase","utilizatorCurent","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","onSignOutSuccess","SIGN_OUT_SUCCESS","cartSagas"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,GAA/B,EAAoCC,MAApC,QAAiD,oBAAjD;AAEA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAAUC,sBAAV,QAAwC,wBAAxC;AACA,SAAQC,SAAR,EAAmBC,mBAAnB,QAA8C,gBAA9C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,kBAAV,GAA8B;AACjC,QAAMT,GAAG,CAACK,SAAS,EAAV,CAAT;AACH;AAGD,OAAO,UAAUK,oBAAV,GAAiC;AACpC,QAAMC,gBAAgB,GAAG,MAAMV,MAAM,CAACG,sBAAD,CAArC;;AACA,MAAIO,gBAAJ,EAAsB;AACpB,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMT,cAAc,CAACQ,gBAAgB,CAACE,EAAlB,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMT,OAAO,GAAG,MAAMT,cAAc,CAACkB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACM,mBAAmB,CAACgB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACD;AACD,OAAO,UAAUW,YAAV,GAAyB;AAC9B,QAAM1B,UAAU,CAACG,cAAc,CAACwB,eAAhB,EAAiCP,qBAAjC,CAAhB;AACD;AAED,OAAO,UAAUQ,YAAV,GAAyB;AAC9B,QAAM5B,UAAU,CACd,CACES,eAAe,CAACoB,QADlB,EAEEpB,eAAe,CAACqB,WAFlB,EAGErB,eAAe,CAACsB,oBAHlB,CADc,EAMdpB,oBANc,CAAhB;AAQD;AACD,OAAO,UAAUqB,gBAAV,GAA4B;AACjC,QAAMhC,UAAU,CAACG,cAAc,CAAC8B,gBAAhB,EAAiCvB,kBAAjC,CAAhB;AACH;AAID,OAAO,UAAUwB,SAAV,GAAsB;AACzB,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAACiC,gBAAD,CAAL,EAAyBjC,IAAI,CAAC6B,YAAD,CAA7B,EAA6C7B,IAAI,CAAC2B,YAAD,CAAjD,CAAD,CAAT;AACH","sourcesContent":["import {all, call, takeLatest, put, select} from 'redux-saga/effects';\r\n\r\nimport UserActionType from '../user/user.types';\r\nimport { getUserCartRef } from '../../firebase/firebase.utils';\r\nimport {  selectUtilizatorCurent } from '../user/user.selectors';\r\nimport {clearCart, setCartFromFirebase } from './cart.actions';\r\nimport { selectCartItems } from './cart.selectors';\r\nimport CartActionTypes from './cart.types';\r\n\r\nexport function* clearCartOnSignOut(){\r\n    yield put(clearCart());\r\n}\r\n\r\n\r\nexport function* updateCartInFirebase() {\r\n    const utilizatorCurent = yield select(selectUtilizatorCurent);\r\n    if (utilizatorCurent) {\r\n      try {\r\n        const cartRef = yield getUserCartRef(utilizatorCurent.id);\r\n        const cartItems = yield select(selectCartItems);\r\n        yield cartRef.update({ cartItems });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  export function* checkCartFromFirebase({ payload: user }) {\r\n    const cartRef = yield getUserCartRef(user.id);\r\n    const cartSnapshot = yield cartRef.get();\r\n    yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\r\n  }\r\n  export function* onUserSignIn() {\r\n    yield takeLatest(UserActionType.SIGN_IN_SUCCESS, checkCartFromFirebase);\r\n  }\r\n  \r\n  export function* onCartChange() {\r\n    yield takeLatest(\r\n      [\r\n        CartActionTypes.ADD_ITEM,\r\n        CartActionTypes.REMOVE_ITEM,\r\n        CartActionTypes.CLEAR_ITEM_FROM_CART\r\n      ],\r\n      updateCartInFirebase\r\n    );\r\n  }\r\n  export function* onSignOutSuccess(){\r\n    yield takeLatest(UserActionType.SIGN_OUT_SUCCESS,clearCartOnSignOut )\r\n}\r\n\r\n\r\n\r\nexport function* cartSagas() {\r\n    yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\r\n}"]},"metadata":{},"sourceType":"module"}